#include <iostream>
#include <iomanip>
#include "mnist_io.cpp"
#include "nn.cpp"

using namespace std;


void train_and_save() {
    int rank, n_processes;
    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &n_processes);

    cout << setprecision(3);

    // Read Train
    int n_samples = 10000; Matrix images(n_samples, IMAGE_PIXELS), labels(n_samples, N_DIGITS);
    read_from_csv("data/train.csv", images, labels, false);    // TODO: names & params as additional args

    // Read Test
    int n_samples_test = 2000; Matrix images_test(n_samples_test, IMAGE_PIXELS), labels_test(n_samples_test, N_DIGITS);
    read_from_csv("data/test.csv", images_test, labels_test, false);    // TODO: names & params as additional args

    // Train
    NeuralNetwork net(IMAGE_PIXELS, N_DIGITS);
    auto histories = net.train(images, labels, images_test, labels_test, 5, 200, .5, true, true);
    if (rank == 0) {
        // Save
        net.save("models/trained.nn");
        save_csv(histories, "histories/training.csv");
    }

    MPI_Finalize();
}

void predict(string pixels_str) {
    // Parse
    Matrix input(1, IMAGE_PIXELS);  // only one image
    parse_image(pixels_str, input);

    // Read
    NeuralNetwork net("models/best.nn");     // TODO: names as additional args

    // Predict
    auto prediction = net.predict_one(input);
    cout << prediction.first << endl << prediction.second << endl;
}

int main(int argc, const char* argv[]) {
//    string dummy = "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03973336818716507,0.36884067442164425,0.3999477192523853,0.40007842112142206,0.292772186642269,0.06665795320873089,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.04339302052019344,0.7137629068095673,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9601359299437981,0.3708012024571951,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.47497059207946674,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9997385962619265,0.9998692981309633,0.9998692981309633,0.9823552476800418,0.07554568030322834,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.14560188210691413,0.9231473010064044,0.9998692981309633,0.9334727486603058,0.012808783165599268,0.013462292510782905,0.37746699777806825,0.9998692981309633,0.9998692981309633,0.13331590641746177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009018428963534178,0.7947980656123382,0.9998692981309633,0.9861456018821069,0.46974251731799765,0,0,0.26663181283492354,0.9998692981309633,0.9998692981309633,0.13331590641746177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3423081950071886,0.9998692981309633,0.9998692981309633,0.42556528558358386,0,0,0,0.26663181283492354,0.9998692981309633,0.9998692981309633,0.13331590641746177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.6218794928767482,0.9998692981309633,0.8489086393935433,0.004574565416285453,0,0,0,0.3020520193438766,0.9998692981309633,0.9998692981309633,0.11540975035943014,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.6665795320873088,0.9998692981309633,0.8886420075807084,0.22193177362436284,0,0,0,0.40452228466867074,0.9998692981309633,1,0.022219317736243627,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.40648281270422165,1,0.9998692981309633,0.9955561364527513,0.6531172395765259,0.05698601490001307,0,0.6572996993857012,0.9998692981309633,0.8572735590118938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.37236962488563585,0.9158279963403476,0.9998692981309633,0.9998692981309633,0.8702130440465299,0.515096065873742,0.9861456018821069,0.9998692981309633,0.5328715200627369,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.05358776630505816,0.5807084041301791,1,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9047183374722259,0.10194745784864724,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.05371846817409489,0.5550908377989805,0.9952947327146778,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.7099725526075022,0.04339302052019344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.004182459809175271,0.4839890210430009,0.9383087178146647,0.9998692981309633,0.9998692981309633,0.8757025225460724,0.8299568683832179,0.9998692981309633,0.9998692981309633,0.7846033198274736,0.05267285322180107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.004182459809175271,0.6289373938047315,0.9998692981309633,0.9998692981309633,0.9955561364527513,0.666971637694419,0.0835184943144687,0.031237746699777805,0.6165207162462423,0.9998692981309633,0.9998692981309633,0.608025094758855,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.4076591295255522,0.9998692981309633,0.9998692981309633,0.7585936478891648,0.18298261665141813,0,0,0,0,0.6295909031499151,0.9998692981309633,0.9996078943928898,0.3016599137367664,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.6667102339563455,0.9998692981309633,0.8524375898575349,0.0350281009018429,0,0,0,0,0,0.05724741863808652,0.8793621748791007,0.9998692981309633,0.9150437851261273,0.07031760554175925,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.6665795320873088,0.9998692981309633,0.7379427525813619,0,0,0,0,0,0,0,0.243889687622533,0.9998692981309633,0.9998692981309633,0.37759769964710493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5909031499150438,0.9998692981309633,0.9857534962749968,0.295647627761077,0,0,0,0,0,0,0.12887204287021303,0.9598745262057248,0.9998692981309633,0.46660567246111617,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.12416677558489086,0.9147823813880539,0.9998692981309633,0.9552999607894392,0.7332374852960397,0.7332374852960397,0.7332374852960397,0.7502287282708143,0.7998954385047706,0.7998954385047706,0.9600052280747615,0.9998692981309633,0.9998692981309633,0.3595608417200366,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.22585282969546464,0.9541236439681088,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9998692981309633,0.9644490916220102,0.515096065873742,0.012808783165599268,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.20337210822114757,0.6356031891256045,0.6665795320873088,0.6665795320873088,0.6665795320873088,0.6495882891125343,0.599921578878578,0.599921578878578,0.5201934387661744,0.1506992549993465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
//    predict(dummy);

//    train_and_save();
//    return 0;
    if (argc < 2) {
        cout << "usage: mnist_in_mpi.out (train|predict)" << endl;
        return 1;
    }

    if (string(argv[1]) == "train") {
        train_and_save();
        return 0;
    }

    if (string(argv[1]) == "predict") {
        if (argc < 3) {
            cout << "usage mnist_in_mpi.out predict <pixels>" << endl;
            return 1;
        }
        predict(argv[2]);
        return 0;
    }
}

